FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git make

WORKDIR /build

# Copy go.mod files and download dependencies
COPY go.mod go.sum ./
COPY demo/src/go.mod demo/src/go.sum ./demo/src/

# Download dependencies
RUN cd demo/src && go mod download

# Copy source code
COPY pkg/ ./pkg/
COPY demo/src/ ./demo/src/
COPY templates/ ./templates/

# Build application
WORKDIR /build/demo/src
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o /app/server .

# Final stage
FROM alpine:latest

RUN apk add --no-cache ca-certificates wget

WORKDIR /app

# Copy binary and templates
COPY --from=builder /app/server .
COPY --from=builder /build/templates ./templates

# Create .env file placeholder (environment variables will override)
RUN echo "# Environment variables loaded from Docker" > .env

EXPOSE 8080

CMD ["./server"]

