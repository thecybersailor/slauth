// Generated by ts-to-zod
import { z } from "zod";
import { FactorType, FactorStatus } from "./../types/auth-api";

export const FactorTypeSchema = z.enum(FactorType);

export const FactorStatusSchema = z.enum(FactorStatus);

export const ResetPasswordOptionsSchema = z.object({
  captchaToken: z.string().optional(),
  redirect_to: z.string().optional(),
});

export const SignInWithOtpOptionsSchema = z.object({
  captchaToken: z.string().optional(),
  channel: z.string().optional(),
  data: z.record(z.string(), z.any()).optional(),
  emailRedirectTo: z.string().optional(),
  redirect_to: z.string().optional(),
  shouldCreateUser: z.boolean().optional(),
});

export const SignInWithPasswordOptionsSchema = z.object({
  captchaToken: z.string().optional(),
  redirect_to: z.string().optional(),
});

export const SignUpOptionsSchema = z.object({
  captchaToken: z.string().optional(),
  channel: z.string().optional(),
  data: z.record(z.string(), z.any()).optional(),
  emailRedirectTo: z.string().optional(),
  redirect_to: z.string().optional(),
});

export const VerifyOtpOptionsSchema = z.object({
  captchaToken: z.string().optional(),
  redirect_to: z.string().optional(),
});

export const WeakPasswordSchema = z.object({
  message: z.string().optional(),
  reasons: z.array(z.string()).optional(),
});

export const ExchangeCodeRequestSchema = z.object({
  auth_code: z.string().optional(),
  code_verifier: z.string().optional(),
  flow_id: z.string().optional(),
  state: z.string().optional(),
});

export const FactorSchema = z.object({
  created_at: z.string().optional(),
  friendly_name: z.string().optional(),
  id: z.string().optional(),
  status: FactorStatusSchema.optional(),
  type: FactorTypeSchema.optional(),
  updated_at: z.string().optional(),
});

export const GetAuditLogResponseSchema = z.object({
  events: z.array(z.record(z.string(), z.any())).optional(),
});

export const GetDevicesResponseSchema = z.object({
  devices: z.array(z.record(z.string(), z.any())).optional(),
});

export const SessionResponseSchema = z.object({
  aal: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  ip: z.string().optional(),
  refreshed_at: z.string().optional(),
  updated_at: z.string().optional(),
  user_agent: z.string().optional(),
  user_id: z.string().optional(),
});

export const MFAChallengeDataSchema = z.object({
  expires_at: z.number().optional(),
  id: z.string().optional(),
  type: FactorTypeSchema.optional(),
});

export const TOTPEnrollDataSchema = z.object({
  qr_code: z.string().optional(),
  secret: z.string().optional(),
  uri: z.string().optional(),
});

export const MFAEnrollRequestSchema = z.object({
  factorType: FactorTypeSchema.optional(),
  friendlyName: z.string().optional(),
  issuer: z.string().optional(),
  phone: z.string().optional(),
});

export const MFAListFactorsDataSchema = z.object({
  all: z.array(FactorSchema).optional(),
  phone: z.array(FactorSchema).optional(),
  totp: z.array(FactorSchema).optional(),
});

export const MFAUnenrollDataSchema = z.object({
  id: z.string().optional(),
});

export const MFAVerifyRequestSchema = z.object({
  challengeId: z.string().optional(),
  code: z.string().optional(),
  factorId: z.string().optional(),
});

export const OAuthDataSchema = z.object({
  config: z.any().optional(),
  flow_id: z.string().optional(),
  provider: z.string().optional(),
});

export const RefreshTokenRequestSchema = z.object({
  refresh_token: z.string().optional(),
});

export const ResendOptionsSchema = z.object({
  captchaToken: z.string().optional(),
  emailRedirectTo: z.string().optional(),
});

export const ResendRequestSchema = z.object({
  email: z.string().optional(),
  options: ResendOptionsSchema.optional(),
  phone: z.string().optional(),
  type: z.string().optional(),
});

export const ResetPasswordRequestSchema = z.object({
  email: z.string().optional(),
  options: ResetPasswordOptionsSchema.optional(),
  phone: z.string().optional(),
});

export const SSODataSchema = z.object({
  url: z.string().optional(),
});

export const SendOTPRequestSchema = z.object({
  channel: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
});

export const SendOTPResponseSchema = z.object({
  messageId: z.string().optional(),
});

export const SendSMSOTPRequestSchema = z.object({
  channel: z.string().optional(),
  phone: z.string().optional(),
});

export const SendSMSOTPResponseSchema = z.object({
  messageId: z.string().optional(),
});

export const SignInWithIdTokenRequestSchema = z.object({
  credential: z.record(z.string(), z.string()).optional(),
  provider: z.string().optional(),
});

export const SignInWithOAuthRequestSchema = z.object({
  options: z.record(z.string(), z.string()).optional(),
  provider: z.string().optional(),
  redirect_to: z.string().optional(),
});

export const SignInWithOtpRequestSchema = z.object({
  email: z.string().optional(),
  options: SignInWithOtpOptionsSchema.optional(),
  phone: z.string().optional(),
});

export const SignInWithPasswordRequestSchema = z.object({
  email: z.string().optional(),
  options: SignInWithPasswordOptionsSchema.optional(),
  password: z.string().optional(),
  phone: z.string().optional(),
});

export const SignInWithSSOOptionsSchema = z.object({
  captchaToken: z.string().optional(),
  redirectTo: z.string().optional(),
});

export const SignInWithSSORequestSchema = z.object({
  domain: z.string().optional(),
  options: SignInWithSSOOptionsSchema.optional(),
  providerId: z.string().optional(),
});

export const SignOutRequestSchema = z.object({
  scope: z.string().optional(),
});

export const SignUpRequestSchema = z.object({
  email: z.string().optional(),
  options: SignUpOptionsSchema.optional(),
  password: z.string().optional(),
  phone: z.string().optional(),
  user_metadata: z.record(z.string(), z.any()).optional(),
});

export const SuccessResponseSchema = z.object({
  success: z.boolean().optional(),
});

export const UpdatePasswordRequestSchema = z.object({
  nonce: z.string().optional(),
  password: z.string().optional(),
});

export const UpdateUserOptionsSchema = z.object({
  emailRedirectTo: z.string().optional(),
});

export const UpdateUserProfileRequestSchema = z.object({
  email: z.string().optional(),
  emailRedirectTo: z.string().optional(),
  password: z.string().optional(),
  phone: z.string().optional(),
  user_metadata: z.record(z.string(), z.any()).optional(),
});

export const UpdateUserRequestSchema = z.object({
  email: z.string().optional(),
  nonce: z.string().optional(),
  options: UpdateUserOptionsSchema.optional(),
  password: z.string().optional(),
  phone: z.string().optional(),
  user_metadata: z.record(z.string(), z.any()).optional(),
});

export const UserIdentitySchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  identity_data: z.record(z.string(), z.any()).optional(),
  identity_id: z.string().optional(),
  last_sign_in_at: z.string().optional(),
  provider: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const UserSchema = z.object({
  aal: z.any().optional(),
  app_metadata: z.record(z.string(), z.any()).optional(),
  aud: z.string().optional(),
  confirmed_at: z.string().optional(),
  created_at: z.string().optional(),
  email: z.string().optional(),
  email_confirmed_at: z.string().optional(),
  factors: z.array(FactorSchema).optional(),
  id: z.string().optional(),
  identities: z.array(UserIdentitySchema).optional(),
  is_anonymous: z.boolean().optional(),
  last_sign_in_at: z.string().optional(),
  phone: z.string().optional(),
  phone_confirmed_at: z.string().optional(),
  role: z.string().optional(),
  updated_at: z.string().optional(),
  user_metadata: z.record(z.string(), z.any()).optional(),
});

export const UserResponseSchema = z.object({
  user: UserSchema.optional(),
});

export const VerifyOtpRequestSchema = z.object({
  email: z.string().optional(),
  options: VerifyOtpOptionsSchema.optional(),
  phone: z.string().optional(),
  token: z.string().optional(),
  token_hash: z.string().optional(),
  type: z.string().optional(),
});

export const SessionSchema = z.object({
  access_token: z.string().optional(),
  expires_at: z.number().optional(),
  expires_in: z.number().optional(),
  id: z.string().optional(),
  provider_refresh_token: z.string().optional(),
  provider_token: z.string().optional(),
  refresh_token: z.string().optional(),
  token_type: z.string().optional(),
  user: UserSchema.optional(),
});

export const ListSessionsResponseSchema = z.object({
  page: z.number().optional(),
  page_size: z.number().optional(),
  sessions: z.array(SessionResponseSchema).optional(),
  total: z.number().optional(),
});

export const MFAEnrollDataSchema = z.object({
  friendly_name: z.string().optional(),
  id: z.string().optional(),
  phone: z.string().optional(),
  totp: TOTPEnrollDataSchema.optional(),
  type: FactorTypeSchema.optional(),
});

export const MFAVerifyDataSchema = z.object({
  access_token: z.string().optional(),
  expires_in: z.number().optional(),
  refresh_token: z.string().optional(),
  token_type: z.string().optional(),
  user: UserSchema.optional(),
});

export const UserDataSchema = z.object({
  user: UserSchema.optional(),
});

export const AuthDataSchema = z.object({
  redirect_to: z.string().optional(),
  session: SessionSchema.optional(),
  user: UserSchema.optional(),
  weakPassword: WeakPasswordSchema.optional(),
});
