// Generated by ts-to-zod
import { z } from "zod";
import { TimeDuration, AALLevel } from "./../types/admin-api";

export const TimeDurationSchema = z.enum(TimeDuration);

export const AALLevelSchema = z.enum(AALLevel);

export const GithubComThecybersailorSlauthPkgConfigAALPolicySchema = z.object({
  aaltimeout: TimeDurationSchema.optional(),
  allowDowngrade: z.boolean().optional(),
});

export const GithubComThecybersailorSlauthPkgConfigSessionConfigSchema =
  z.object({
    accessTokenTTL: TimeDurationSchema.optional(),
    enforceSingleSessionPerUser: z.boolean().optional(),
    inactivityTimeout: TimeDurationSchema.optional(),
    refreshTokenReuseInterval: TimeDurationSchema.optional(),
    refreshTokenTTL: TimeDurationSchema.optional(),
    revokeCompromisedRefreshTokens: z.boolean().optional(),
    timeBoxUserSessions: TimeDurationSchema.optional(),
  });

export const GithubComThecybersailorSlauthPkgConfigPasswordStrengthConfigSchema =
  z.object({
    minScore: z.number().optional(),
  });

export const GithubComThecybersailorSlauthPkgConfigRateLimitSchema = z.object({
  description: z.string().optional(),
  max_requests: z.number().optional(),
  window_duration: TimeDurationSchema.optional(),
});

export const GithubComThecybersailorSlauthPkgConfigRatelimitConfigSchema =
  z.object({
    anonymous_users_rate_limit:
      GithubComThecybersailorSlauthPkgConfigRateLimitSchema.optional(),
    email_rate_limit:
      GithubComThecybersailorSlauthPkgConfigRateLimitSchema.optional(),
    sign_up_sign_in_rate_limit:
      GithubComThecybersailorSlauthPkgConfigRateLimitSchema.optional(),
    sms_rate_limit:
      GithubComThecybersailorSlauthPkgConfigRateLimitSchema.optional(),
    token_refresh_rate_limit:
      GithubComThecybersailorSlauthPkgConfigRateLimitSchema.optional(),
    token_verification_rate_limit:
      GithubComThecybersailorSlauthPkgConfigRateLimitSchema.optional(),
    web3_sign_up_sign_in_rate_limit:
      GithubComThecybersailorSlauthPkgConfigRateLimitSchema.optional(),
  });

export const GithubComThecybersailorSlauthPkgConfigPasswordUpdateConfigSchema =
  z.object({
    rateLimit: GithubComThecybersailorSlauthPkgConfigRateLimitSchema.optional(),
    revokeOtherSessions: z.boolean().optional(),
    updateRequiredAAL: AALLevelSchema.optional(),
  });

export const AdminCreateUserRequestSchema = z.object({
  app_metadata: z.record(z.string(), z.any()).optional(),
  email: z.string().optional(),
  email_confirmed: z.boolean().optional(),
  password: z.string().optional(),
  phone: z.string().optional(),
  phone_confirmed: z.boolean().optional(),
  user_data: z.record(z.string(), z.any()).optional(),
  user_metadata: z.record(z.string(), z.any()).optional(),
});

export const AdminResetPasswordRequestSchema = z.object({
  new_password: z.string().optional(),
});

export const AdminUpdateUserRequestSchema = z.object({
  app_metadata: z.record(z.string(), z.any()).optional(),
  banned_until: z.string().optional(),
  email: z.string().optional(),
  email_confirmed: z.boolean().optional(),
  phone: z.string().optional(),
  phone_confirmed: z.boolean().optional(),
  user_data: z.record(z.string(), z.any()).optional(),
});

export const AdminUserResponseSchema = z.object({
  app_meta_data: z.record(z.string(), z.any()).optional(),
  banned_until: z.string().optional(),
  created_at: z.string().optional(),
  email: z.string().optional(),
  email_confirmed: z.boolean().optional(),
  id: z.string().optional(),
  is_anonymous: z.boolean().optional(),
  last_sign_in_at: z.string().optional(),
  phone: z.string().optional(),
  phone_confirmed: z.boolean().optional(),
  updated_at: z.string().optional(),
  user_meta_data: z.record(z.string(), z.any()).optional(),
});

export const CreateSAMLProviderRequestSchema = z.object({
  enabled: z.boolean().optional(),
  name: z.string(),
});

export const SAMLProviderResponseSchema = z.object({
  created_at: z.string().optional(),
  enabled: z.boolean().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  updated_at: z.string().optional(),
});

export const SessionResponseSchema = z.object({
  aal: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  ip: z.string().optional(),
  refreshed_at: z.string().optional(),
  updated_at: z.string().optional(),
  user_agent: z.string().optional(),
  user_id: z.string().optional(),
});

export const ListUsersResponseSchema = z.object({
  page: z.number().optional(),
  page_size: z.number().optional(),
  total: z.number().optional(),
  users: z.array(AdminUserResponseSchema).optional(),
});

export const QueryPaginationSchema = z.object({
  page: z.number().optional(),
  pageSize: z.number().optional(),
});

export const QueryUsersRequestSchema = z.object({
  filters: z.record(z.string(), z.any()).optional(),
  pagination: QueryPaginationSchema.optional(),
  sort: z.array(z.string()).optional(),
});

export const SessionStatsResponseSchema = z.object({
  active_sessions: z.number().optional(),
  expired_sessions: z.number().optional(),
  total_sessions: z.number().optional(),
});

export const StatsResponseSchema = z.object({
  count: z.number().optional(),
});

export const UpdateSAMLProviderRequestSchema = z.object({
  enabled: z.boolean().optional(),
  name: z.string().optional(),
});

export const GithubComThecybersailorSlauthPkgConfigSecurityConfigSchema =
  z.object({
    aalpolicy: GithubComThecybersailorSlauthPkgConfigAALPolicySchema.optional(),
    passwordStrengthConfig:
      GithubComThecybersailorSlauthPkgConfigPasswordStrengthConfigSchema.optional(),
    passwordUpdateConfig:
      GithubComThecybersailorSlauthPkgConfigPasswordUpdateConfigSchema.optional(),
  });

export const GithubComThecybersailorSlauthPkgConfigAuthServiceConfigSchema =
  z.object({
    allow_new_users: z.boolean().optional(),
    anonymous_sign_ins: z.boolean().optional(),
    auth_service_base_url: z.string().optional(),
    confirm_email: z.boolean().optional(),
    enable_captcha: z.boolean().optional(),
    manual_linking: z.boolean().optional(),
    max_time_allowed_for_auth_request: TimeDurationSchema.optional(),
    maximum_mfa_factor_validation_attempts: z.number().optional(),
    maximum_mfa_factors: z.number().optional(),
    mfa_update_required_aal: AALLevelSchema.optional(),
    ratelimit_config:
      GithubComThecybersailorSlauthPkgConfigRatelimitConfigSchema.optional(),
    redirect_urls: z.array(z.string()).optional(),
    security_config:
      GithubComThecybersailorSlauthPkgConfigSecurityConfigSchema.optional(),
    session_config:
      GithubComThecybersailorSlauthPkgConfigSessionConfigSchema.optional(),
    site_url: z.string().optional(),
  });

export const ListSAMLProvidersResponseSchema = z.object({
  page: z.number().optional(),
  page_size: z.number().optional(),
  providers: z.array(SAMLProviderResponseSchema).optional(),
  total: z.number().optional(),
});

export const ListSessionsResponseSchema = z.object({
  page: z.number().optional(),
  page_size: z.number().optional(),
  sessions: z.array(SessionResponseSchema).optional(),
  total: z.number().optional(),
});

export const UpdateInstanceConfigRequestSchema = z.object({
  config:
    GithubComThecybersailorSlauthPkgConfigAuthServiceConfigSchema.optional(),
});

export const UpdateInstanceConfigResponseSchema = z.object({
  config:
    GithubComThecybersailorSlauthPkgConfigAuthServiceConfigSchema.optional(),
  message: z.string().optional(),
});

export const GetInstanceConfigResponseSchema = z.object({
  config:
    GithubComThecybersailorSlauthPkgConfigAuthServiceConfigSchema.optional(),
  domain_code: z.string().optional(),
});
