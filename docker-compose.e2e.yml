services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    platform: linux/amd64
    environment:
      POSTGRES_USER: e2e_user
      POSTGRES_PASSWORD: e2e_password
      POSTGRES_DB: slauth_e2e
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "15432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U e2e_user -d slauth_e2e"]
      interval: 3s
      timeout: 3s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - e2e-network

  # Redis
  redis:
    image: redis:7-alpine
    platform: linux/amd64
    ports:
      - "16379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 10
    networks:
      - e2e-network

  # MailHog - Email testing service
  mailhog:
    image: mailhog/mailhog:latest
    platform: linux/amd64
    ports:
      - "11025:1025"  # SMTP server
      - "18025:8025"  # Web UI
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 3s
      timeout: 3s
      retries: 10
    networks:
      - e2e-network

  # SMSHog - AWS SNS SMS Mock and Display Tool
  smshog:
    image: zauberware/smshog:latest
    platform: linux/amd64
    ports:
      - "18026:3000"  # Web UI and API
    environment:
      SMSHOG_PERSIST: "false"  # No persistence needed for E2E tests
    healthcheck:
      test: ["CMD-SHELL", "kill -0 1 || exit 1"]
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - e2e-network

  # Backend service
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    platform: linux/amd64
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_healthy
      smshog:
        condition: service_healthy
    environment:
      # Database configuration
      SYS_DB_TYPE: "pgsql"
      SYS_DB_HOST: "postgres"
      SYS_DB_USER: "e2e_user"
      SYS_DB_PASSWORD: "e2e_password"
      SYS_DB_DBNAME: "slauth_e2e"
      SYS_DB_PORT: "5432"
      
      # Redis configuration
      SYS_REDIS_ADDR: "redis:6379"
      SYS_REDIS_PASSWORD: ""
      SYS_REDIS_DB: "0"
      
      # SMTP configuration (MailHog)
      SYS_SMTP_HOST: mailhog
      SYS_SMTP_PORT: 1025
      SYS_SMTP_USERNAME: ""
      SYS_SMTP_PASSWORD: ""
      SYS_SMTP_MAILFROM: noreply@slauth-e2e.test
      
      # SMS configuration (SMSHog - AWS SNS Mock)
      AWS_SNS_ENDPOINT: http://smshog:3000
      
      # Service configuration
      LISTEN: ":8080"
      AUTH_SERVICE_BASE_URL: "http://frontend:5180/auth"
      SITE_URL: "http://frontend:5180"
      GOOGLE_CLIENT_ID: "dummy-client-id"
      GOOGLE_CLIENT_SECRET: "dummy-client-secret"
      
      # Gin mode
      GIN_MODE: release
    ports:
      - "18080:8080"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "-O", "/dev/null", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - e2e-network

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        VITE_API_URL: http://backend:8080
        VITE_MOCK_OAUTH_SERVER: http://backend:8080/mock-oauth
    platform: linux/amd64
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "15180:5180"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5180/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - e2e-network

  # E2E tests (run on demand, not persistent)
  e2e-tests:
    build:
      context: .
      dockerfile: docker/Dockerfile.e2e
    platform: linux/amd64
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      CI: "true"
      PLAYWRIGHT_BASE_URL: http://frontend:5180
      FRONTEND_URL: http://frontend:5180
      BACKEND_URL: http://backend:8080
      MAILHOG_URL: http://mailhog:8025
      SMSHOG_URL: http://smshog:3000
    volumes:
      - ./packages/demo-fe/playwright-report:/app/playwright-report
      - ./packages/demo-fe/test-results:/app/test-results
    networks:
      - e2e-network
    command: ["npx", "playwright", "test", "--reporter=html"]

networks:
  e2e-network:
    driver: bridge

volumes:
  postgres_data:


